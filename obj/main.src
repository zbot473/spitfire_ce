; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\MAIN.C"
	.assume ADL=1
	SEGMENT BSS
_player:
	DS	3
_bomb:
	DS	3
_title:
	DS	3
_subtitle:
	DS	3
_wrench:
	DS	3
_enemies:
	DS	21
	SEGMENT DATA
_dimensions:
	DW	41
	DB	0
	DW	15
	DB	0
	DW	617
	DB	0
	DW	55
	DB	0
	DW	25
	DB	0
	DW	1377
	DB	0
	DW	65
	DB	0
	DW	18
	DB	0
	DW	1172
	DB	0
	DW	56
	DB	0
	DW	22
	DB	0
	DW	1234
	DB	0
	DW	93
	DB	0
	DW	19
	DB	0
	DW	1769
	DB	0
	DW	129
	DB	0
	DW	26
	DB	0
	DW	3356
	DB	0
	DW	58
	DB	0
	DW	29
	DB	0
	DW	1684
	DB	0
_enemiesCompressed:
	DW24	_enemy_1_compressed
	DW24	_enemy_2_compressed
	DW24	_enemy_3_compressed
	DW24	_enemy_4_compressed
	DW24	_enemy_5_compressed
	DW24	_enemy_6_compressed
_bulletsCompressed:
	DW24	_bullet_1_compressed
	DW24	_bullet_2_compressed
	DW24	_bullet_3_compressed
	SEGMENT BSS
_bulletLocations:
	DS	700
_enemyLocations:
	DS	400
_bullets:
	DS	9
	SEGMENT DATA
_isPlaying:
	DB	1
_inGame:
	DB	0
_inMenu:
	DB	1
	SEGMENT BSS
_score:
	DS	3
_i:
	DS	3
;    1	#include <stdbool.h>
;    2	#include <stddef.h>
;    3	#include <stdint.h>
;    4	#include <tice.h>
;    5	
;    6	#include <math.h>
;    7	#include <stdio.h>
;    8	#include <stdlib.h>
;    9	#include <string.h>
;   10	#include <debug.h>
;   11	
;   12	#include <graphx.h>
;   13	#include <keypadc.h>
;   14	#include "gfx/sprites.h"
;   15	
;   16	void setup();
;   17	void updatePlayer();
;   18	void updateEnemies();
;   19	void updateBullets();
;   20	void drawMenu();
;   21	void drawSprites();
;   22	
;   23	gfx_rletsprite_t *player, *bomb, *title, *subtitle, *wrench;
;   24	gfx_rletsprite_t *enemies[7];
;   25	int dimensions[7][3] = {
;   26	    {enemy_1_width, enemy_1_height, enemy_1_size},
;   27	    {enemy_2_width, enemy_2_height, enemy_2_size},
;   28	    {enemy_3_width, enemy_3_height, enemy_3_size},
;   29	    {enemy_4_width, enemy_4_height, enemy_4_size},
;   30	    {enemy_5_width, enemy_5_height, enemy_5_size},
;   31	    {enemy_6_width, enemy_6_height, enemy_6_size},
;   32	    {enemy_7_width, enemy_7_height, enemy_7_size}};
;   33	uint8_t *enemiesCompressed[6] = {
;   34	    enemy_1_compressed,
;   35	    enemy_2_compressed,
;   36	    enemy_3_compressed,
;   37	    enemy_4_compressed,
;   38	    enemy_5_compressed,
;   39	    enemy_6_compressed};
;   40	uint8_t *bulletsCompressed[3] = {
;   41	    bullet_1_compressed,
;   42	    bullet_2_compressed,
;   43	    bullet_3_compressed};
;   44	typedef struct
;   45	{
;   46	    bool active;
;   47	    int x;
;   48	    int y;
;   49	} bullet_t;
;   50	bullet_t bulletLocations[100];
;   51	typedef struct
;   52	{
;   53	    bool active;
;   54	    int type;
;   55	    int x;
;   56	    int y;
;   57	} enemy_t;
;   58	enemy_t enemyLocations[40];
;   59	gfx_rletsprite_t *bullets[3];
;   60	bool isPlaying = true;
;   61	bool inGame = false;
;   62	bool inMenu = true;
;   63	int score;
;   64	
;   65	int i;
	SEGMENT CODE
;   66	
;   67	void setup()
;   68	{
_setup:
;   69	    player = gfx_MallocRLETSprite(player_size); //allocate memory by pixel dimensions
	LD	BC,1090
	PUSH	BC
	CALL	_malloc
	POP	BC
	LD	(_player),HL
;   70	    zx7_Decompress(player, player_compressed);              //decompress sprite
	LD	BC,_player_compressed
	PUSH	BC
	LD	BC,(_player)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;   71	    bomb = gfx_MallocRLETSprite(bomb_size);
	LD	BC,66
	PUSH	BC
	CALL	_malloc
	POP	BC
	LD	(_bomb),HL
;   72	    zx7_Decompress(bomb, bomb_compressed);
	LD	BC,_bomb_compressed
	PUSH	BC
	LD	BC,(_bomb)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;   73	    title = gfx_MallocRLETSprite(title_size);
	LD	BC,21677
	PUSH	BC
	CALL	_malloc
	POP	BC
	LD	(_title),HL
;   74	    zx7_Decompress(title, title_compressed);
	LD	BC,_title_compressed
	PUSH	BC
	LD	BC,(_title)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;   75	    subtitle = gfx_MallocRLETSprite(subtitle_size);
	LD	BC,1500
	PUSH	BC
	CALL	_malloc
	POP	BC
	LD	(_subtitle),HL
;   76	    zx7_Decompress(subtitle, subtitle_compressed);
	LD	BC,_subtitle_compressed
	PUSH	BC
	LD	BC,(_subtitle)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;   77	    wrench = gfx_MallocRLETSprite(wrench_size);
	LD	BC,1026
	PUSH	BC
	CALL	_malloc
	POP	BC
	LD	(_wrench),HL
;   78	    zx7_Decompress(wrench, wrench_compressed);
	LD	BC,_wrench_compressed
	PUSH	BC
	LD	BC,(_wrench)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;   79	
;   80	    for (i = 0; i < 6; i++)
	LD	BC,0
	LD	(_i),BC
	JR	L_3
L_1:
;   81	    {
;   82	        enemies[i] = gfx_MallocRLETSprite(dimensions[i][2]);
	LD	HL,(_i)
	LD	A,9
	CALL	__imul_b
	LD	BC,_dimensions
	ADD	HL,BC
	LD	IY,HL
	LEA	HL,IY+6
	LD	BC,(HL)
	PUSH	BC
	CALL	_malloc
	POP	BC
	LD	BC,HL
	LD	HL,(_i)
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	LD	DE,_enemies
	ADD	HL,DE
	LD	(HL),BC
;   83	        zx7_Decompress(enemies[i], enemiesCompressed[i]);
	LD	HL,(_i)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,BC
	LD	DE,_enemiesCompressed
	ADD	HL,DE
	LD	DE,(HL)
	PUSH	DE
	LD	HL,BC
	LD	BC,_enemies
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
	LD	BC,(_i)
	INC	BC
	LD	(_i),BC
;   84	    }
L_3:
	LD	BC,6
	LD	HL,(_i)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_1
;   85	    for (i = 0; i < 3; i++)
	LD	BC,0
	LD	(_i),BC
	JR	L_7
L_5:
;   86	    {
;   87	        bullets[i] = gfx_MallocRLETSprite(bullet_1_size);
	LD	BC,114
	PUSH	BC
	CALL	_malloc
	POP	BC
	LD	BC,HL
	LD	HL,(_i)
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	LD	DE,_bullets
	ADD	HL,DE
	LD	(HL),BC
;   88	        zx7_Decompress(bullets[i], bulletsCompressed[i]);
	LD	HL,(_i)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,BC
	LD	DE,_bulletsCompressed
	ADD	HL,DE
	LD	DE,(HL)
	PUSH	DE
	LD	HL,BC
	LD	BC,_bullets
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
	LD	BC,(_i)
	INC	BC
	LD	(_i),BC
;   89	    }
L_7:
	LD	BC,3
	LD	HL,(_i)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_5
;   90	
;   91	    gfx_Begin();                                        //begin graphics
	CALL	_gfx_Begin
;   92	    gfx_SetPalette(sprites_pal, sizeof_sprites_pal, 0); //set graphics palette
	LD	BC,0
	PUSH	BC
	LD	BC,512
	PUSH	BC
	LD	BC,_sprites_pal
	PUSH	BC
	CALL	_gfx_SetPalette
	POP	BC
	POP	BC
	POP	BC
;   93	    gfx_SetDrawBuffer();                                //start to buffer graphics for visual quality
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;   94	    gfx_SetTextFGColor(4);                              //white text
	LD	BC,4
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;   95	    gfx_SetColor(3);
	LD	BC,3
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;   96	}
	RET	


;**************************** _setup ***************************
;Name                         Addr/Register   Size   Type
;_gfx_SetColor                       IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;_sprites_pal                        IMPORT    512   variable
;_gfx_SetPalette                     IMPORT  -----   function
;_gfx_Begin                          IMPORT  -----   function
;_bulletsCompressed                  STATIC      9   variable
;_bullets                            STATIC      9   variable
;_enemiesCompressed                  STATIC     18   variable
;_enemies                            STATIC     21   variable
;_dimensions                         STATIC     63   variable
;_i                                  STATIC      3   variable
;_wrench_compressed                  IMPORT     61   variable
;_wrench                             STATIC      3   variable
;_subtitle_compressed                IMPORT    147   variable
;_subtitle                           STATIC      3   variable
;_title_compressed                   IMPORT   2692   variable
;_title                              STATIC      3   variable
;_bomb_compressed                    IMPORT     43   variable
;_bomb                               STATIC      3   variable
;_player_compressed                  IMPORT    341   variable
;_zx7_Decompress                     IMPORT  -----   function
;_player                             STATIC      3   variable
;_malloc                             IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT BSS
_right:
	DS	1
_left:
	DS	1
_up:
	DS	1
_down:
	DS	1
_arrows:
	DS	1
_x:
	DS	3
_y:
	DS	3
;   97	bool right; //key bools
;   98	bool left;
;   99	bool up;
;  100	bool down;
;  101	kb_key_t arrows; //arrow keys
;  102	int x, y;
	SEGMENT CODE
;  103	
;  104	void updatePlayer()
;  105	{
_updatePlayer:
;  106	    arrows = kb_Data[7];       //kb data bit 7 has arrows, among other stuff
	LD	A,(16056350)
	LD	(_arrows),A
;  107	    right = arrows & kb_Right; //check if right key pressed
	AND	A,4
	LD	(_right),A
;  108	    left = arrows & kb_Left;
	LD	A,(_arrows)
	AND	A,2
	LD	(_left),A
;  109	    down = arrows & kb_Down;
	LD	A,(_arrows)
	AND	A,1
	LD	(_down),A
;  110	    up = arrows & kb_Up;
	LD	A,(_arrows)
	AND	A,8
	LD	(_up),A
;  111	    if (arrows)
	LD	A,(_arrows)
	OR	A,A
	JR	Z,L_20
;  112	    {
;  113	        if (right)
	LD	A,(_right)
	OR	A,A
	JR	Z,L_13
;  114	        {
;  115	            x += 2;
	LD	IY,(_x)
	LEA	BC,IY+2
	LD	(_x),BC
;  116	        }
L_13:
;  117	        if (left)
	LD	A,(_left)
	OR	A,A
	JR	Z,L_15
;  118	        {
;  119	            x -= 2;
	LD	IY,(_x)
	LEA	BC,IY+-2
	LD	(_x),BC
;  120	        }
L_15:
;  121	        if (down)
	LD	A,(_down)
	OR	A,A
	JR	Z,L_17
;  122	        {
;  123	            y += 2;
	LD	IY,(_y)
	LEA	BC,IY+2
	LD	(_y),BC
;  124	        }
L_17:
;  125	        if (up)
	LD	A,(_up)
	OR	A,A
	JR	Z,L_20
;  126	        {
;  127	            y -= 2;
	LD	IY,(_y)
	LEA	BC,IY+-2
	LD	(_y),BC
;  128	        }
;  129	    }
L_20:
;  130	    if (x < 0)
	LD	HL,(_x)
	CALL	__icmpzero
	JP	P,L_22
;  131	    {
;  132	        x += 2;
	LD	IY,(_x)
	LEA	BC,IY+2
	LD	(_x),BC
;  133	    }
L_22:
;  134	    if (y < 0)
	LD	HL,(_y)
	CALL	__icmpzero
	CALL	__setflag
	JP	P,L_24
;  135	    {
;  136	        y += 2;
	LD	IY,(_y)
	LEA	BC,IY+2
	LD	(_y),BC
;  137	    }
L_24:
;  138	    if (x > 256)
	LD	BC,(_x)
	LD	HL,256
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_26
;  139	    {
;  140	        x -= 2;
	LD	IY,(_x)
	LEA	BC,IY+-2
	LD	(_x),BC
;  141	    }
L_26:
;  142	    if (y > 223)
	LD	BC,(_y)
	LD	HL,223
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_27
;  143	    {
;  144	        y -= 2;
	LD	IY,(_y)
	LEA	BC,IY+-2
	LD	(_y),BC
;  145	    }
;  146	}
L_27:
	RET	


;**************************** _updatePlayer ***************************
;Name                         Addr/Register   Size   Type
;_y                                  STATIC      3   variable
;_x                                  STATIC      3   variable
;_up                                 STATIC      1   variable
;_down                               STATIC      1   variable
;_left                               STATIC      1   variable
;_right                              STATIC      1   variable
;_arrows                             STATIC      1   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT DATA
_bulletDelay:
	DB	0
_delayTick:
	DW	0
	DB	0
;  147	
;  148	bool bulletDelay = false; //don't shoot during this time
;  149	int delayTick = 0;        //frame interval
	SEGMENT CODE
;  150	void updateBullets()
;  151	{
_updateBullets:
	LD	HL,-15
	CALL	__frameset
;  152	    if (delayTick == 15)
	LD	BC,15
	LD	HL,(_delayTick)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_30
;  153	    {
;  154	        bulletDelay = false; //now we can shoot
	XOR	A,A
	LD	(_bulletDelay),A
;  155	        delayTick = 0;       //reset frame interval
	LD	BC,0
	LD	(_delayTick),BC
;  156	    }
L_30:
;  157	    delayTick++;
	LD	BC,(_delayTick)
	INC	BC
	LD	(_delayTick),BC
;  158	    if (kb_Data[1] == kb_2nd && !bulletDelay)
	LD	A,(16056338)
	CP	A,32
	JR	NZ,L_44
	LD	A,(_bulletDelay)
	OR	A,A
	JR	NZ,L_44
;  159	    {
;  160	        for (i = 0; i < 100; i++)
	LD	BC,0
	LD	(_i),BC
	JR	L_36
L_34:
;  161	        {
;  162	            if (!bulletLocations[i].active) //if it isn't in use, skip
	LD	HL,(_i)
	LD	A,7
	CALL	__imul_b
	LD	(IX+-6),HL
	LD	BC,_bulletLocations
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	OR	A,A
	JR	NZ,L_35
;  163	            {
;  164	                bulletLocations[i].x = x + 64; //move to end of player
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	(IX+-12),HL
	LD	IY,(_x)
	LEA	BC,IY+64
	LD	IY,(IX+-12)
	LD	(IY+1),BC
;  165	                bulletLocations[i].y = y + 9;  //x to player x, offset by around half
	LD	IY,(_y)
	LEA	BC,IY+9
	LD	IY,(IX+-12)
	LD	(IY+4),BC
;  166	                bulletLocations[i].active = true;
	LD	A,1
	LD	(IY+0),A
;  167	                bulletDelay = true; //turn off shooting
	LD	(_bulletDelay),A
;  168	                break;              // we don't need to waste time iterating, so break.
	JR	L_44
;  169	            }
;  170	        }
L_35:
	LD	BC,(_i)
	INC	BC
	LD	(_i),BC
L_36:
	LD	BC,100
	LD	HL,(_i)
	OR	A,A
	SBC	HL,BC
	JP	M,L_34
;  171	    }
L_44:
;  172	    for (i = 0; i < 100; i++)
	LD	BC,0
	LD	(_i),BC
	JR	L_43
L_41:
;  173	    {
;  174	        if (bulletLocations[i].active)
	LD	HL,(_i)
	LD	A,7
	CALL	__imul_b
	LD	(IX+-3),HL
	LD	BC,_bulletLocations
	ADD	HL,BC
	LD	(IX+-9),HL
	LD	IY,(IX+-9)
	LD	A,(IY+0)
	OR	A,A
	JR	Z,L_42
;  175	        {
;  176	            bulletLocations[i].x += 5;      //move bullet
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	(IX+-15),HL
	LD	IY,(IX+-15)
	LD	IY,(IY+1)
	LEA	BC,IY+5
	LD	IY,(IX+-15)
	LD	(IY+1),BC
;  177	            if (bulletLocations[i].x > 304) //bullet would be offscreen, so don't draw it
	LD	BC,(IY+1)
	LD	HL,304
	OR	A,A
	SBC	HL,BC
	JP	P,L_42
;  178	            {
;  179	                bulletLocations[i].active = false;
	LD	IY,(IX+-9)
	LD	(IY+0),0
;  180	            }
;  181	        }
;  182	    }
L_42:
	LD	BC,(_i)
	INC	BC
	LD	(_i),BC
L_43:
	LD	BC,100
	LD	HL,(_i)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_41
;  183	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _updateBullets ***************************
;Name                         Addr/Register   Size   Type
;_y                                  STATIC      3   variable
;_x                                  STATIC      3   variable
;_bulletLocations                    STATIC    700   variable
;_i                                  STATIC      3   variable
;_bulletDelay                        STATIC      1   variable
;_delayTick                          STATIC      3   variable
;G_3                                   IX-9      3   variable
;G_0                                   IX-6      3   variable
;G_1                                   IX-3      3   variable


; Stack Frame Size: 21 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT DATA
_spawnTick:
	DW	0
	DB	0
	SEGMENT BSS
_j:
	DS	3
;  184	
;  185	//never really bothered to make a function for this,  but you need to play around with lists and callbacks
;  186	int spawnTick = 0;
;  187	int j;
	SEGMENT CODE
;  188	void updateEnemies()
;  189	{
_updateEnemies:
	LD	HL,-24
	CALL	__frameset
;  190	    if (spawnTick == 10)
	LD	BC,10
	LD	HL,(_spawnTick)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_56
;  191	    {
;  192	        if (randInt(0, 1) == 1)
	CALL	_random
	LD	A,L
	AND	A,1
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,1
	SBC	HL,BC
	JR	NZ,L_53
;  193	        {
;  194	            for (i = 0; i < 40; i++)
	LD	BC,0
	LD	(_i),BC
	JR	L_50
L_48:
;  195	            {
;  196	                if (!enemyLocations[i].active) //Same as before, function isn't really needed, as it only makes code shorter. Exec time is same
	LD	HL,(_i)
	LD	A,10
	CALL	__imul_b
	LD	BC,_enemyLocations
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	OR	A,A
	JR	NZ,L_49
;  197	                {
;  198	                    int type = randInt(0, 5);
	CALL	_random
	LD	BC,6
	CALL	__iremu
	LD	(IX+-9),HL
;  199	                    enemyLocations[i].type = type;
	LD	HL,(_i)
	LD	A,10
	CALL	__imul_b
	LD	BC,_enemyLocations
	ADD	HL,BC
	LD	(IX+-15),HL
	LD	BC,(IX+-9)
	LD	IY,(IX+-15)
	LD	(IY+1),BC
;  200	                    enemyLocations[i].x = 320 - dimensions[type][0];
	LD	HL,(IX+-9)
	LD	A,9
	CALL	__imul_b
	LD	BC,_dimensions
	ADD	HL,BC
	LD	IY,HL
	LD	HL,320
	LD	BC,(IY)
	OR	A,A
	SBC	HL,BC
	LD	IY,(IX+-15)
	LD	(IY+4),HL
;  201	                    enemyLocations[i].y = randInt(0, 240 - dimensions[type][1]);
	LD	HL,(_i)
	LD	A,10
	CALL	__imul_b
	LD	BC,_enemyLocations
	ADD	HL,BC
	LD	(IX+-12),HL
	CALL	_random
	LD	DE,HL
	LD	HL,(IX+-9)
	LD	A,9
	CALL	__imul_b
	LD	BC,_dimensions
	ADD	HL,BC
	LD	IY,HL
	LEA	HL,IY+3
	LD	BC,(HL)
	LD	HL,240
	OR	A,A
	SBC	HL,BC
	LD	BC,HL
	INC	BC
	LD	HL,DE
	CALL	__iremu
	LD	IY,(IX+-12)
	LD	(IY+7),HL
;  202	                    enemyLocations[i].active = true;
	LD	(IY+0),1
;  203	                    break;
	JR	L_53
;  204	                }
;  205	            }
L_49:
	LD	BC,(_i)
	INC	BC
	LD	(_i),BC
L_50:
	LD	BC,40
	LD	HL,(_i)
	OR	A,A
	SBC	HL,BC
	JP	M,L_48
;  206	        }
L_53:
;  207	        if (spawnTick == 10)
	LD	BC,10
	LD	HL,(_spawnTick)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_56
;  208	        {
;  209	            spawnTick = 0;
	LD	BC,0
	LD	(_spawnTick),BC
;  210	        }
;  211	    }
L_56:
;  212	    spawnTick++;
	LD	BC,(_spawnTick)
	INC	BC
	LD	(_spawnTick),BC
;  213	    for (i = 0; i < 40; i++)
	LD	BC,0
	LD	(_i),BC
	JR	L_70
L_68:
;  214	    {
;  215	        if (enemyLocations[i].active)
	LD	HL,(_i)
	LD	A,10
	CALL	__imul_b
	LD	(IX+-3),HL
	LD	BC,_enemyLocations
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	OR	A,A
	JR	Z,L_69
;  216	        {
;  217	            enemyLocations[i].x -= 2;
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	(IX+-18),HL
	LD	IY,(IX+-18)
	LD	IY,(IY+4)
	LEA	BC,IY+-2
	LD	IY,(IX+-18)
	LD	(IY+4),BC
;  218	            if (enemyLocations[i].x < -dimensions[enemyLocations[i].type][0])
	LD	HL,(IY+1)
	LD	A,9
	CALL	__imul_b
	LD	BC,_dimensions
	ADD	HL,BC
	LD	HL,(HL)
	CALL	__ineg
	LD	BC,HL
	LD	HL,(IY+4)
	OR	A,A
	SBC	HL,BC
	JP	P,L_66
;  219	            {
;  220	                score -= enemyLocations[i].type*1000;
	LD	BC,_enemyLocations
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	(IX+-21),HL
	LD	IY,(IX+-21)
	LD	HL,(IY+1)
	LD	BC,1000
	CALL	__imuls
	LD	BC,HL
	LD	HL,(_score)
	OR	A,A
	SBC	HL,BC
	LD	(_score),HL
;  221	                enemyLocations[i].active = false;
	LD	(IY+0),0
;  222	                continue;
	JR	L_69
;  223	            }
L_66:
;  224	            for ( j = 0; j < 100; j++)
	LD	BC,0
	LD	(_j),BC
	JR	L_65
L_63:
;  225	            {
;  226	                if (bulletLocations[j].active)
	LD	HL,(_j)
	LD	A,7
	CALL	__imul_b
	LD	BC,_bulletLocations
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	IY,(IX+-6)
	LD	A,(IY+0)
	OR	A,A
	JR	Z,L_64
;  227	                {
;  228	                    if (abs(bulletLocations[j].x - 16 - enemyLocations[i].x) < 5 && abs(bulletLocations[j].y - enemyLocations[i].y) < 5)
	LD	IY,(IX+-6)
	LD	IY,(IY+1)
	LD	HL,(_i)
	LD	A,10
	CALL	__imul_b
	LD	BC,_enemyLocations
	ADD	HL,BC
	LEA	BC,IY+-16
	LD	IY,HL
	LD	DE,(IY+4)
	LD	HL,BC
	OR	A,A
	SBC	HL,DE
	PUSH	HL
	CALL	_abs
	POP	BC
	LD	BC,5
	OR	A,A
	SBC	HL,BC
	JP	P,L_64
	LD	HL,(_j)
	LD	A,7
	CALL	__imul_b
	LD	BC,_bulletLocations
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(_i)
	LD	A,10
	CALL	__imul_b
	LD	BC,_enemyLocations
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IY+4)
	LD	IY,BC
	LD	BC,(IY+7)
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	CALL	_abs
	POP	BC
	LD	BC,5
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_64
;  229	                    {
;  230	                        score += enemyLocations[i].type*1000;
	LD	HL,(_i)
	LD	A,10
	CALL	__imul_b
	LD	BC,_enemyLocations
	ADD	HL,BC
	LD	(IX+-24),HL
	LD	IY,(IX+-24)
	LD	HL,(IY+1)
	LD	BC,1000
	CALL	__imuls
	LD	BC,(_score)
	ADD	HL,BC
	LD	(_score),HL
;  231	                        enemyLocations[i].active = false;
	LD	(IY+0),0
;  232	                        break;
	JR	L_69
;  233	                    }
;  234	                }
;  235	            }
L_64:
	LD	BC,(_j)
	INC	BC
	LD	(_j),BC
L_65:
	LD	BC,100
	LD	HL,(_j)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_63
;  236	        }
;  237	    }
L_69:
	LD	BC,(_i)
	INC	BC
	LD	(_i),BC
L_70:
	LD	BC,40
	LD	HL,(_i)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_68
;  238	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _updateEnemies ***************************
;Name                         Addr/Register   Size   Type
;_abs                                IMPORT  -----   function
;_bulletLocations                    STATIC    700   variable
;_j                                  STATIC      3   variable
;_score                              STATIC      3   variable
;_dimensions                         STATIC     63   variable
;_enemyLocations                     STATIC    400   variable
;_i                                  STATIC      3   variable
;_random                             IMPORT  -----   function
;_spawnTick                          STATIC      3   variable
;type                                  IX-9      3   variable
;G_6                                   IX-6      3   variable
;G_4                                   IX-3      3   variable


; Stack Frame Size: 30 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT BSS
_frame:
	DS	3
	SEGMENT DATA
_frameTick:
	DW	0
	DB	0
;  239	int frame, frameTick = 0;
	SEGMENT CODE
;  240	void drawSprites()
;  241	{
_drawSprites:
	LD	HL,-12
	CALL	__frameset
;  242	    if (frame == 5)
	LD	BC,5
	LD	HL,(_frame)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_78
;  243	    {
;  244	        if (frameTick < 2)
	LD	BC,2
	LD	HL,(_frameTick)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_74
;  245	        {
;  246	            frameTick++;
	LD	BC,(_frameTick)
	INC	BC
	LD	(_frameTick),BC
;  247	        }
;  248	        else
	JR	L_75
L_74:
;  249	        {
;  250	            frameTick = 0;
	LD	BC,0
	LD	(_frameTick),BC
;  251	        }
L_75:
;  252	        frame = 0;
	LD	BC,0
	LD	(_frame),BC
;  253	    }
L_78:
;  254	    frame++;
;  255	    gfx_FillScreen(1);
	LD	BC,1
	PUSH	BC
	LD	BC,(_frame)
	INC	BC
	LD	(_frame),BC
	CALL	_gfx_FillScreen
	POP	BC
;  256	    gfx_RLETSprite_NoClip(player, x, y);
	LD	A,(_y)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(_x)
	PUSH	BC
	LD	BC,(_player)
	PUSH	BC
	CALL	_gfx_RLETSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  257	    for (i = 0; i < 100; i++)
	LD	BC,0
	LD	(_i),BC
	JR	L_83
L_81:
;  258	    {
;  259	        if (bulletLocations[i].active)
	LD	HL,(_i)
	LD	A,7
	CALL	__imul_b
	LD	(IX+-3),HL
	LD	BC,_bulletLocations
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	OR	A,A
	JR	Z,L_82
;  260	        {
;  261	            gfx_RLETSprite_NoClip(bullets[frameTick], bulletLocations[i].x, bulletLocations[i].y);
	LD	HL,(IX+-3)
	ADD	HL,BC
	LD	(IX+-9),HL
	LD	IY,(IX+-9)
	LD	C,(IY+4)
	LD	B,0
	PUSH	BC
	LD	BC,(IY+1)
	PUSH	BC
	LD	HL,(_frameTick)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_bullets
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_RLETSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  262	            //draw the bullet frame at the corrdinates
;  263	        }
;  264	    }
L_82:
	LD	BC,(_i)
	INC	BC
	LD	(_i),BC
L_83:
	LD	BC,100
	LD	HL,(_i)
	OR	A,A
	SBC	HL,BC
	JP	M,L_81
;  265	    for (i = 0; i < 40; i++)
	LD	BC,0
	LD	(_i),BC
	JR	L_88
L_86:
;  266	    {
;  267	        if (enemyLocations[i].active)
	LD	HL,(_i)
	LD	A,10
	CALL	__imul_b
	LD	(IX+-6),HL
	LD	BC,_enemyLocations
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+0)
	OR	A,A
	JR	Z,L_87
;  268	        {
;  269	            gfx_RLETSprite(enemies[enemyLocations[i].type], enemyLocations[i].x, enemyLocations[i].y);
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	(IX+-12),HL
	LD	IY,(IX+-12)
	LD	BC,(IY+7)
	PUSH	BC
	LD	BC,(IY+4)
	PUSH	BC
	LD	HL,(IY+1)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_enemies
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_RLETSprite
	POP	BC
	POP	BC
	POP	BC
;  270	            //draw the bullet frame at the corrdinates
;  271	        }
;  272	    }
L_87:
	LD	BC,(_i)
	INC	BC
	LD	(_i),BC
L_88:
	LD	BC,40
	LD	HL,(_i)
	OR	A,A
	SBC	HL,BC
	JP	M,L_86
;  273	    gfx_FillRectangle_NoClip(0,200,320,40);
	PUSH	BC
	LD	BC,320
	PUSH	BC
	LD	BC,200
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillRectangle_NoClip
	POP	BC
	POP	BC
	POP	BC
	POP	BC
;  274	    gfx_PrintStringXY("Score: ",20,216);
	LD	BC,216
	PUSH	BC
	LD	BC,20
	PUSH	BC
	LD	BC,L__41
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  275	    gfx_PrintInt(score,8);
	LD	BC,8
	PUSH	BC
	LD	BC,(_score)
	PUSH	BC
	CALL	_gfx_PrintInt
	POP	BC
	POP	BC
;  276	    gfx_RLETSprite_NoClip(wrench,288,208);
	LD	BC,208
	PUSH	BC
	LD	BC,288
	PUSH	BC
	LD	BC,(_wrench)
	PUSH	BC
	CALL	_gfx_RLETSprite_NoClip
	POP	BC
	POP	BC
	POP	BC
;  277	    gfx_BlitBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;  278	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _drawSprites ***************************
;Name                         Addr/Register   Size   Type
;_gfx_Blit                           IMPORT  -----   function
;_wrench                             STATIC      3   variable
;_score                              STATIC      3   variable
;_gfx_PrintInt                       IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_FillRectangle_NoClip           IMPORT  -----   function
;_enemies                            STATIC     21   variable
;_gfx_RLETSprite                     IMPORT  -----   function
;_enemyLocations                     STATIC    400   variable
;_bullets                            STATIC      9   variable
;_bulletLocations                    STATIC    700   variable
;_i                                  STATIC      3   variable
;_player                             STATIC      3   variable
;_x                                  STATIC      3   variable
;_y                                  STATIC      3   variable
;_gfx_RLETSprite_NoClip              IMPORT  -----   function
;_gfx_FillScreen                     IMPORT  -----   function
;_frameTick                          STATIC      3   variable
;_frame                              STATIC      3   variable
;G_9                                   IX-6      3   variable
;G_8                                   IX-3      3   variable


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__41:
	DB	"Score: "
	DB	0
	SEGMENT DATA
_option:
	DB	1
;  279	bool option = true;
	SEGMENT CODE
;  280	void drawMenu()
;  281	{
_drawMenu:
;  282	    gfx_FillScreen(6);
	LD	BC,6
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;  283	    gfx_RLETSprite(title, 32, 40);      //Spitfire
	LD	BC,40
	PUSH	BC
	LD	BC,32
	PUSH	BC
	LD	BC,(_title)
	PUSH	BC
	CALL	_gfx_RLETSprite
	POP	BC
	POP	BC
	POP	BC
;  284	    gfx_RLETSprite(subtitle, 107, 145); //Air superiority
	LD	BC,145
	PUSH	BC
	LD	BC,107
	PUSH	BC
	LD	BC,(_subtitle)
	PUSH	BC
	CALL	_gfx_RLETSprite
	POP	BC
	POP	BC
	POP	BC
;  285	    if (option)
	LD	A,(_option)
	OR	A,A
	JR	Z,L_93
;  286	    {
;  287	        gfx_SetTextBGColor(5); //Highlighted
	LD	BC,5
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  288	        gfx_PrintStringXY("Play", 100, 169);
	LD	BC,169
	PUSH	BC
	LD	BC,100
	PUSH	BC
	LD	BC,L__44
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  289	        gfx_SetTextBGColor(255); //reset
	LD	BC,255
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  290	        gfx_PrintStringXY("Quit", 220 - gfx_GetStringWidth("Quit"), 169);
	LD	BC,169
	PUSH	BC
	LD	BC,L__45
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	LD	BC,HL
	LD	HL,220
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	LD	BC,L__46
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  291	    }
;  292	    else
	JR	L_97
L_93:
;  293	    {
;  294	        gfx_SetTextBGColor(255); //Reset
	LD	BC,255
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  295	        gfx_PrintStringXY("Play", 100, 169);
	LD	BC,169
	PUSH	BC
	LD	BC,100
	PUSH	BC
	LD	BC,L__47
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  296	        gfx_SetTextBGColor(5); //Highlighted
	LD	BC,5
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;  297	        gfx_PrintStringXY("Quit", 220 - gfx_GetStringWidth("Quit"), 169);
	LD	BC,169
	PUSH	BC
	LD	BC,L__48
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	LD	BC,HL
	LD	HL,220
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	LD	BC,L__49
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  298	    }
L_97:
;  299	    if (kb_Data[7] == kb_Left)
	LD	A,(16056350)
	CP	A,2
	JR	NZ,L_96
;  300	    {
;  301	        option = true;
	LD	A,1
	LD	(_option),A
;  302	    }
;  303	    else if (kb_Data[7] == kb_Right)
	JR	L_101
L_96:
	LD	A,(16056350)
	CP	A,4
	JR	NZ,L_101
;  304	    {
;  305	        option = false;
	XOR	A,A
	LD	(_option),A
;  306	    }
L_101:
;  307	    if (kb_Data[6] == kb_Enter)
	LD	A,(16056348)
	CP	A,1
	JR	NZ,L_102
;  308	    {
;  309	        if (option)
	LD	A,(_option)
	OR	A,A
	JR	Z,L_99
;  310	        {
;  311	            inMenu = false;
	XOR	A,A
	LD	(_inMenu),A
;  312	            inGame = true;
	LD	A,1
	LD	(_inGame),A
;  313	        }
;  314	        else
	JR	L_102
L_99:
;  315	        {
;  316	            inMenu = false;
	XOR	A,A
	LD	(_inMenu),A
;  317	            isPlaying = false;
	XOR	A,A
	LD	(_isPlaying),A
;  318	        }
;  319	    }
L_102:
;  320	    gfx_BlitBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_Blit
	POP	BC
;  321	}
	RET	


;**************************** _drawMenu ***************************
;Name                         Addr/Register   Size   Type
;_gfx_Blit                           IMPORT  -----   function
;_isPlaying                          STATIC      1   variable
;_inGame                             STATIC      1   variable
;_inMenu                             STATIC      1   variable
;_gfx_GetStringWidth                 IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;_gfx_SetTextBGColor                 IMPORT  -----   function
;_option                             STATIC      1   variable
;_subtitle                           STATIC      3   variable
;_title                              STATIC      3   variable
;_gfx_RLETSprite                     IMPORT  -----   function
;_gfx_FillScreen                     IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__44:
	DB	"Play"
	DB	0
L__45:
	DB	"Quit"
	DB	0
L__46:
	DB	"Quit"
	DB	0
L__47:
	DB	"Play"
	DB	0
L__48:
	DB	"Quit"
	DB	0
L__49:
	DB	"Quit"
	DB	0
	SEGMENT CODE
;  322	
;  323	void main()
;  324	{
_main:
;  325	    setup();
	CALL	_setup
;  326	    while (isPlaying)
	JR	L_110
;  327	    {
;  328	        while (inMenu)
L_105:
;  329	        {
;  330	            kb_Scan();
	CALL	_kb_Scan
;  331	            drawMenu();
	CALL	_drawMenu
;  332	        }
L_104:
	LD	A,(_inMenu)
	OR	A,A
	JR	NZ,L_105
;  333	        while (inGame)
	JR	L_107
L_108:
;  334	        {
;  335	            kb_Scan();       //scan keyboard
	CALL	_kb_Scan
;  336	            updateBullets(); //update bullets
	CALL	_updateBullets
;  337	            updatePlayer();  //update player
	CALL	_updatePlayer
;  338	            updateEnemies(); //update enemies
	CALL	_updateEnemies
;  339	            updateBullets(); //update bullets
	CALL	_updateBullets
;  340	            drawSprites();   //draw everything
	CALL	_drawSprites
;  341	
;  342	            if (kb_Data[6] == kb_Clear)
	LD	A,(16056348)
	CP	A,64
	JR	NZ,L_107
;  343	            {
;  344	                inMenu = true;
	LD	A,1
	LD	(_inMenu),A
;  345	                inGame = false;
	XOR	A,A
	LD	(_inGame),A
;  346	            }
;  347	        }
L_107:
	LD	A,(_inGame)
	OR	A,A
	JR	NZ,L_108
;  348	    }
L_110:
	LD	A,(_isPlaying)
	OR	A,A
	JR	NZ,L_104
;  349	    gfx_End();    //end graphics
	CALL	_gfx_End
;  350	    free(player); //free all ram
	LD	BC,(_player)
	PUSH	BC
	CALL	_free
	POP	BC
;  351	    free(bomb);
	LD	BC,(_bomb)
	PUSH	BC
	CALL	_free
	POP	BC
;  352	    free(title);
	LD	BC,(_title)
	PUSH	BC
	CALL	_free
	POP	BC
;  353	    free(subtitle);
	LD	BC,(_subtitle)
	PUSH	BC
	CALL	_free
	POP	BC
;  354	    for (i = 0; i < 7; i++)
	LD	BC,0
	LD	(_i),BC
	JR	L_116
L_114:
;  355	    {
;  356	        free(enemies[i]);
	LD	HL,(_i)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_enemies
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_free
	POP	BC
	LD	BC,(_i)
	INC	BC
	LD	(_i),BC
;  357	    }
L_116:
	LD	BC,7
	LD	HL,(_i)
	OR	A,A
	SBC	HL,BC
	JP	M,L_114
;  358	    for (i = 0; i < 3; i++)
	LD	BC,0
	LD	(_i),BC
	JR	L_120
L_118:
;  359	    {
;  360	        free(bullets[i]);
	LD	HL,(_i)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,_bullets
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_free
	POP	BC
	LD	BC,(_i)
	INC	BC
	LD	(_i),BC
;  361	    }
L_120:
	LD	BC,3
	LD	HL,(_i)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_118
;  362	    os_ClrHome();
	LD	BC,_asm_ClrLCD
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_HomeUp
	PUSH	BC
	CALL	__OS
	POP	BC
	LD	BC,_asm_DrawStatusBar
	PUSH	BC
	CALL	__OS
	POP	BC
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_asm_DrawStatusBar                  IMPORT  -----   function
;_asm_HomeUp                         IMPORT  -----   function
;_asm_ClrLCD                         IMPORT  -----   function
;__OS                                IMPORT  -----   function
;_bullets                            STATIC      9   variable
;_enemies                            STATIC     21   variable
;_i                                  STATIC      3   variable
;_subtitle                           STATIC      3   variable
;_title                              STATIC      3   variable
;_bomb                               STATIC      3   variable
;_player                             STATIC      3   variable
;_free                               IMPORT  -----   function
;_gfx_End                            IMPORT  -----   function
;_isPlaying                          STATIC      1   variable
;_inGame                             STATIC      1   variable
;_drawSprites                        IMPORT  -----   function
;_updateEnemies                      IMPORT  -----   function
;_updatePlayer                       IMPORT  -----   function
;_updateBullets                      IMPORT  -----   function
;_inMenu                             STATIC      1   variable
;_drawMenu                           IMPORT  -----   function
;_kb_Scan                            IMPORT  -----   function
;_setup                              IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


	XREF _zx7_Decompress:ROM
	XREF _sprites_pal:ROM
	XREF _wrench_compressed:ROM
	XREF _title_compressed:ROM
	XREF _subtitle_compressed:ROM
	XREF _player_compressed:ROM
	XREF _enemy_6_compressed:ROM
	XREF _enemy_5_compressed:ROM
	XREF _enemy_4_compressed:ROM
	XREF _enemy_3_compressed:ROM
	XREF _enemy_2_compressed:ROM
	XREF _enemy_1_compressed:ROM
	XREF _bullet_3_compressed:ROM
	XREF _bullet_2_compressed:ROM
	XREF _bullet_1_compressed:ROM
	XREF _bomb_compressed:ROM
	XREF _kb_Scan:ROM
	XREF _gfx_RLETSprite_NoClip:ROM
	XREF _gfx_RLETSprite:ROM
	XREF _gfx_GetStringWidth:ROM
	XREF _gfx_SetTextBGColor:ROM
	XREF _gfx_SetTextFGColor:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_PrintInt:ROM
	XREF _gfx_Blit:ROM
	XREF _gfx_SetDraw:ROM
	XREF _gfx_FillRectangle_NoClip:ROM
	XREF _gfx_FillScreen:ROM
	XREF _gfx_SetPalette:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_End:ROM
	XREF _gfx_Begin:ROM
	XREF _abs:ROM
	XREF _free:ROM
	XREF _malloc:ROM
	XREF _asm_DrawStatusBar:ROM
	XREF _asm_ClrLCD:ROM
	XREF _asm_HomeUp:ROM
	XREF __OS:ROM
	XREF _random:ROM
	XREF __imuls:ROM
	XREF __ineg:ROM
	XREF __iremu:ROM
	XREF __frameset:ROM
	XREF __setflag:ROM
	XREF __icmpzero:ROM
	XREF __imul_b:ROM
	XDEF _main
	XDEF _drawMenu
	XDEF _option
	XDEF _drawSprites
	XDEF _frameTick
	XDEF _frame
	XDEF _updateEnemies
	XDEF _j
	XDEF _spawnTick
	XDEF _updateBullets
	XDEF _delayTick
	XDEF _bulletDelay
	XDEF _updatePlayer
	XDEF _y
	XDEF _x
	XDEF _arrows
	XDEF _down
	XDEF _up
	XDEF _left
	XDEF _right
	XDEF _setup
	XDEF _i
	XDEF _score
	XDEF _inMenu
	XDEF _inGame
	XDEF _isPlaying
	XDEF _bullets
	XDEF _enemyLocations
	XDEF _bulletLocations
	XDEF _bulletsCompressed
	XDEF _enemiesCompressed
	XDEF _dimensions
	XDEF _enemies
	XDEF _wrench
	XDEF _subtitle
	XDEF _title
	XDEF _bomb
	XDEF _player
	END
